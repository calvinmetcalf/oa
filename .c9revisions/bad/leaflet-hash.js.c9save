{"ts":1352130135673,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1352130137219,"patch":[[{"diffs":[[1,"(function(window) {\r\n    var HAS_HASHCHANGE = (function() {\r\n        var doc_mode = window.documentMode;\r\n        return ('onhashchange' in window) &&\r\n            (doc_mode === undefined || doc_mode > 7);\r\n    })();\r\n    \r\n    L.Hash = function(map) {\r\n        this.onHashChange = L.Util.bind(this.onHashChange, this);\r\n    \r\n        if (map) {\r\n            this.init(map);\r\n        }\r\n    };\r\n    \r\n    L.Hash.prototype = {\r\n        map: null,\r\n        lastHash: null,\r\n    \r\n        parseHash: function(hash) {\r\n            if(hash.indexOf('#') == 0) {\r\n                hash = hash.substr(1);\r\n            }\r\n            var args = hash.split(\"/\");\r\n            if (args.length == 3) {\r\n                var zoom = parseInt(args[0], 10),\r\n                    lat = parseFloat(args[1]),\r\n                    lon = parseFloat(args[2]);\r\n                if (isNaN(zoom) || isNaN(lat) || isNaN(lon)) {\r\n                    return false;\r\n                } else {\r\n                    return {\r\n                        center: new L.LatLng(lat, lon),\r\n                        zoom: zoom\r\n                    };\r\n                }\r\n            } else {\r\n                return false;\r\n            }\r\n        },\r\n    \r\n        formatHash: function(map) {\r\n            var center = map.getCenter(),\r\n                zoom = map.getZoom(),\r\n                precision = Math.max(0, Math.ceil(Math.log(zoom) / Math.LN2));\r\n            \r\n            return \"#\" + [zoom,\r\n                center.lat.toFixed(precision),\r\n                center.lng.toFixed(precision)\r\n            ].join(\"/\");\r\n        },\r\n    \r\n        init: function(map) {\r\n            this.map = map;\r\n            \r\n            this.map.on(\"moveend\", this.onMapMove, this);\r\n            \r\n            // reset the hash\r\n            this.lastHash = null;\r\n            this.onHashChange();\r\n    \r\n            if (!this.isListening) {\r\n                this.startListening();\r\n            }\r\n        },\r\n    \r\n        remove: function() {\r\n            this.map = null;\r\n            if (this.isListening) {\r\n                this.stopListening();\r\n            }\r\n        },\r\n        \r\n        onMapMove: function(map) {\r\n            // bail if we're moving the map (updating from a hash),\r\n            // or if the map has no zoom set\r\n            \r\n            if (this.movingMap || this.map.getZoom() === 0) {\r\n                return false;\r\n            }\r\n            \r\n            var hash = this.formatHash(this.map);\r\n            if (this.lastHash != hash) {\r\n                location.replace(hash);\r\n                this.lastHash = hash;\r\n            }\r\n        },\r\n    \r\n        movingMap: false,\r\n        update: function() {\r\n            var hash = location.hash;\r\n            if (hash === this.lastHash) {\r\n                // console.info(\"(no change)\");\r\n                return;\r\n            }\r\n            var parsed = this.parseHash(hash);\r\n            if (parsed) {\r\n                // console.log(\"parsed:\", parsed.zoom, parsed.center.toString());\r\n                this.movingMap = true;\r\n                \r\n                this.map.setView(parsed.center, parsed.zoom);\r\n                \r\n                this.movingMap = false;\r\n            } else {\r\n                // console.warn(\"parse error; resetting:\", this.map.getCenter(), this.map.getZoom());\r\n                this.onMapMove(this.map);\r\n            }\r\n        },\r\n    \r\n        // defer hash change updates every 100ms\r\n        changeDefer: 100,\r\n        changeTimeout: null,\r\n        onHashChange: function() {\r\n            // throttle calls to update() so that they only happen every\r\n            // `changeDefer` ms\r\n            if (!this.changeTimeout) {\r\n                var that = this;\r\n                this.changeTimeout = setTimeout(function() {\r\n                    that.update();\r\n                    that.changeTimeout = null;\r\n                }, this.changeDefer);\r\n            }\r\n        },\r\n    \r\n        isListening: false,\r\n        hashChangeInterval: null,\r\n        startListening: function() {\r\n            if (HAS_HASHCHANGE) {\r\n                L.DomEvent.addListener(window, \"hashchange\", this.onHashChange);\r\n            } else {\r\n                clearInterval(this.hashChangeInterval);\r\n                this.hashChangeInterval = setInterval(this.onHashChange, 50);\r\n            }\r\n            this.isListening = true;\r\n        },\r\n    \r\n        stopListening: function() {\r\n            if (HAS_HASHCHANGE) {\r\n                L.DomEvent.removeListener(window, \"hashchange\", this.onHashChange);\r\n            } else {\r\n                clearInterval(this.hashChangeInterval);\r\n            }\r\n            this.isListening = false;\r\n        }\r\n    };\r\n})(window);"]],"start1":0,"start2":0,"length1":0,"length2":4707}]],"length":4707,"saved":false}
